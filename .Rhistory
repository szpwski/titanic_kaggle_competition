#1. Load data
test <- read.csv("test.csv")
train <- read.csv("train.csv")
#2. Exploring data
head(train)
tail(train)
is.na(train)
summary(train)
class(train)
sum(is.na(train))
sum(is.na(train$PassengerId))
sum(is.na(train$Pclass))
sum(is.na(train$Name))
is.na(train)
is.null(train)
is.null(train$Cabin)
#2. Exploring data
head(train)
is.na(train$Cabin)
is.null(train$Cabin)
train$Sex
train[train$Sex=="male",]
train[train$Sex=="male","Sex"]
train[train$Sex=="male"|train$Sex=="female","Sex"]
train[train$Sex=="male","Sex"]
train[train$Sex=="male","Sex"]<-0
train[train$Sex!="male","Sex"]
train[train$Sex=="female","Sex"]
train[train$Sex=="female","Sex"]<-1
sum(train$Sex)
train$Sex
as.numeric(train$Sex)
train$Sex<-as.numeric(train$Sex)
sum(train$Sex)
length(train$Sex)
length(train$Sex)-sum(train$Sex)
#creating correlation matrix and visualizing it
corrmat<-round(cor(train),2)
summary(train)
#2. Exploring data
head(train)
tail(train)
#survival - did passenger survive - 0=no, 1=yes
#pclass - ticket class - 1=1st, 2=2nd, 3=3rd
#sex - sex - m/f <-- might want to do feature enginerring and set 0=male, 1=female
#age - age in years <-- some NA's
#sibsp - number of siblings / spouses aboard the Titanic <-- one generation
#parch - number of parents / children aboard the Titanic <-- generation above or below
#ticket - ticket number <-- for now we will leave it - hard to get information from it
#fare - passenger fare
#cabin - cabin number <-- many blind spots - for now we will leave it
#embarked - port of embarkation - C=Cherbourg, Q=Quennstown, S=Southampton <-- 1=cherbourg, 2=Queenstown, 3=Southampton
is.na(train$Age)
#survival - did passenger survive - 0=no, 1=yes
#pclass - ticket class - 1=1st, 2=2nd, 3=3rd
#sex - sex - m/f <-- might want to do feature enginerring and set 0=male, 1=female
#age - age in years <-- some NA's
#sibsp - number of siblings / spouses aboard the Titanic <-- one generation
#parch - number of parents / children aboard the Titanic <-- generation above or below
#ticket - ticket number <-- for now we will leave it - hard to get information from it
#fare - passenger fare
#cabin - cabin number <-- many blind spots - for now we will leave it
#embarked - port of embarkation - C=Cherbourg, Q=Quennstown, S=Southampton <-- 1=cherbourg, 2=Queenstown, 3=Southampton
sum(is.na(train$Age))
train$Age[is.na(train$Age)==TRUE,]
train$Age[is.na(train$Age)==TRUE]
train[is.na(train$Age)==TRUE]
train[is.na(train$Age)==TRUE,]
train[is.na(train$Age)==TRUE,]<-NA
train
train[is.na(train$Age)==TRUE,]
train[is.na(train$Age)==TRUE,]<-NULL
train <- read.csv("train.csv")
train[is.na(train$Age)==TRUE,]<-NULL
train[is.na(train$Age)==TRUE,]
na.omit(train)
na.omit(train)$Age
sum(is.na(na.omit(train)$Age))
train<-na.omit(train)
train
is.na(train$Age)
sum(is.na(train$Age))
summary(train)
train <- read.csv("train.csv")
df<-na.omit(train)
summary(df)
#feature enginerring
df[df$Sex=="male","Sex"]<-0
df[df$Sex=="female","Sex"]<-1
df$df<-as.numeric(df$Sex)
sum(df$Sex) #314 female passengers
df$df<-as.numeric(df$Sex)
df$Sex<-as.numeric(df$Sex)
sum(df$Sex) #314 female passengers
length(df$Sex)-sum(df$Sex) #577 male passengers
#leaving ticket and cabin
df<-subset(df,select=-c("Ticket","Cabin"))
summary(df)
#leaving ticket and cabin
df<-subset(df,select=-c("Ticket","Cabin"))
subset(df,select="Fare")
subset(df,select=-"Fare")
subset(df,select=-c("Fare"))
df[-c("Ticket","Cabin"),]
df[c("Ticket","Cabin"),]
df[,c("Ticket","Cabin")]
df[,-c("Ticket","Cabin")]
within(df, rm(c("Ticket","Cabin"))
within(df, rm(c("Ticket","Cabin")))
within(df, rm(c("Ticket","Cabin")))
#leaving ticket and cabin
df[,-1]
#leaving ticket and cabin
df[,-c(1,2)]
#leaving ticket and cabin
df[,-c(7,9)]
#leaving ticket and cabin
summary(df[,-c(7,9)])
#leaving ticket and cabin
df[,-c(7,9)]
df$df<-NULL
summary(df)
#leaving ticket and cabin
df$Cabin<-NULL
df$Ticket<-NULL
summary(df)
#checking if passengerID are unique
unique(df$PassengerId)
#checking if passengerID are unique
duplicated(df$PassengerId)
#checking if passengerID are unique
sum(duplicated(df$PassengerId))
#2. Exploring data
head(train)
#they are so for now we drop name column
df_name<-df
df$Name<-NULL
summary(df)
#feature enginerring on Embarked
df$Embarked[df$Embarked=="S",]
#feature enginerring on Embarked
df[df$Embarked=="S",]
#feature enginerring on Embarked
df[df$Embarked=="S",]$Embarked
#feature enginerring on Embarked
df[df$Embarked=="S",]$Embarked <- 3
#feature enginerring on Embarked
df[df$Embarked=="C",]$Embarked <- 1
df[df$Embarked=="Q",]$Embarked <- 2
summary(df)
as.numeric(df$Embarked)
df$Embarked<-as.numeric(df$Embarked)
summary(df)
summary(train)
summary(df)
#we got 2 NA's, will replace them with random number
df$Embarked[df$Embarked==NA]
#we got 2 NA's, will replace them with random number
df[df$Embarked==NA,]$Embarked
summary(df)
#we got 2 NA's, will replace them with random number
df$Embarked
#we got 2 NA's, will replace them with random number
df[df$Embarked==NA,]
#we got 2 NA's, will replace them with random number
df[is.na(df$Embarked)==TRUE,]$Embarked
#we got 2 NA's, will replace them with random number
df[is.na(df$Embarked)==TRUE,]$Embarked <- c(1,2)
summary(df)
summary(df)
#creating correlation matrix and visualizing it
corrmat<-round(cor(train),2)
#creating correlation matrix and visualizing it
corrmat<-round(cor(df),2)
head(corrmat)
library(reshape2)
melted_cormat <- melt(corrmat)
head(melted_cormat)
library(ggplot2)
ggplot(data=melted_cormat,aes(x=Var1,y=Var2,fill=value))+geom_title()
ggplot(data=melted_cormat,aes(x=Var1,y=Var2,fill=value))+geom_tile()
#get upper trainge of the correlation matrix
get_upper_tri <- function(corrmat){
corrmat[lower.tri(corrmat)]<-NA
return(corrmat)
}
#get lower trainge of the correlation matrix
get_lower_tri <- function(corrmat){
corrmat[upper.tri(corrmat)]<-NA
return(corrmat)
}
upper_tri <- get_upper_tri(corrmat)
upper_tri
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Heatmap
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
plot(df$Survived, df$Pclass)
#another analysis
library(GGally)
ggpairs(df)
ggpairs(df,ggplot2::aes(colour=survived))
#negative correlation:
#1. survived ~ pclass
#2. survived ~ embarked
#positive correlation:
#1. survived ~ sex
#2. survived ~ fare
summary(df)
ggpairs(df,ggplot2::aes(colour=Survived))
source('~/.active-rstudio-document', echo=TRUE)
df$Survived<-as.factor(df$Survived)
ggpairs(df,ggplot2::aes(colour=Survived))
ggpairs(df,columns=3:9,ggplot2::aes(colour=Survived))
ggpairs(df,columns=-2,ggplot2::aes(colour=Survived))
ggpairs(df,columns=c(1,3:9),ggplot2::aes(colour=Survived))
#we use SVM to predict if someone survived
#at first we are going to use pclass, sex, fare and embarked as predictors
plot(df$PassengerId,df$Survived)
#generating observations to 2 classes and checking whether the classes are linearly seperable
set.seed(1)
#9.1 Support Vetor Classifier
#install.packages("e1071")
library(e1071)
x<-matrix(rnorm(20*2),ncol=2)
y<-c(rep(-1,10),rep(1,10))
x[y==1,]<-x[y==1,]+1
plot(x,col=(3-y))
#we use SVM to predict if someone survived
#at first we are going to use pclass, sex, fare and embarked as predictors
plot(df$PassengerId,col=df$Survived)
#we use SVM to predict if someone survived
#at first we are going to use pclass, sex, fare and embarked as predictors
#create matrix of survived and not survived
matr <- matrix(ncol=2)
matr[1,]
matr[,1]
matr[,1] <- df[df$Survived==0,]
Khan
data(Khan)
#9.5 Application to Gene Expression Data
#using Khan data set
library(ISLR)
data(Khan)
Khan
summary(Khan)
Khan$xtrain
#we use SVM to predict if someone survived
#at first we are going to use pclass, sex, fare and embarked as predictors
out=svm(Survived~Pclass+Sex+Fare+Embarked, data=df, kernel="linear",cost=10)
summary(out)
table(out$fitted,dat$y)
table(out$fitted,df$Survived)
93/360
64/197
(64+93)/(360+197+64+93)
#generate data with non-linear class boundary
set.seed(1)
x<- matrix(rnorm(200*2),ncol=2)
x[1:100,]<-x[1:100,]+2
x[101:150,]<-x[101:150,]-2
y<-c(rep(1,150),rep(2,50))
dat<-data.frame(x=x,y=as.factor(y))
train=sample(200,100)
svmfit<-svm(y~., data=dat[train,], kernel="radial", gamma=1, cost=1)
#reducing number of training errors
svmfit<-svm(y~., data=dat[train,], kernel="radial", gamma=1, cost=1e5)
#performing cross-validation using tune() to select best choice of gamma and cost with radial kernel
set.seed(1)
tune.out<-tune(svm, y~., data=dat[train,], kernel="radial",
range = list(cost=c(0.1,1,10,100,1000), gamma=c(0.5,1,2,3,4)))
summary(tune.out)
#viewing test set predictions for this model
table(true=dat[-train,"y"], pred=predict(tune.out$best.model,
newdata=dat[-train,]))
12/(12+67+21)
#using radial kernel
out=svm(Survived~Pclass+Sex+Fare+Embarked, data=df, kernel="radial", gamma=1, cost=10)
summary(out)
table(out$fitted,df$Survived)
(134)/(580)
out=svm(Survived~Pclass+Sex+Fare+Embarked, data=df, kernel="radial", gamma=1, cost=10)
summary(out)
table(out$fitted,df$Survived)
out=svm(Survived~Pclass+Sex+Fare+Embarked, data=df, kernel="polynomial", gamma=1, cost=10)
summary(out)
table(out$fitted,df$Survived)
#using linear kernel
out=svm(Survived~Pclass+Sex+Fare+Embarked, data=df, kernel="linear",cost=1)
summary(out)
table(out$fitted,df$Survived)
#using radial kernel
out=svm(Survived~Pclass+Sex+Fare+Embarked, data=df, kernel="radial", gamma=1, cost=1)
#using radial kernel
out=svm(Survived~Pclass+Sex+Fare+Embarked, data=df, kernel="radial", gamma=1, cost=1)
table(out$fitted,df$Survived)
(118+19)/(405+172+118+19)
(64+93)/(360+197+64+93)
out=svm(Survived~Pclass+Sex+Fare+Embarked, data=df, kernel="polynomial", gamma=1, cost=1)
table(out$fitted,df$Survived)
(127+14)/(127+14+410+163)
#it seems that radial kernel is the best option
#lets check for the best gamma and cost parameters using tune() function
tune.out<-tune(svm, Survived~Pclass+Sex+Fare+Embarked, data=df, kernel="radial",
range = list(cost=c(0.1,1,10,100,1000), gamma=c(0.5,1,2,3,4)))
summary(tune.out)
#we got cost=1 and gamma=0.5 as best parameters
plot(tune.out$best.model,df)
#first predictions
df_t=test
out<-tune.out$best.model
head(test)
df_t<-na.omit(test)
df_t$Cabin<-NULL
df_t$Ticket<-NULL
df_t$Name<-NULL
df_t[df_t$Embarked=="C",]$Embarked <- 1
df_t[df_t$Embarked=="Q",]$Embarked <- 2
df_t[df_t$Embarked=="S",]$Embarked <- 3
df_t$Embarked<-as.numeric(df_t$Embarked)
summary(df_t)
df_t$Sex
df_t[df_t$Sex=="male","Sex"]<-0
df_t[df_t$Sex=="female","Sex"]<-1
df_t$Sex<-as.numeric(df_t$Sex)
summary(df_t)
#first predictions
pred.te=predict(out,newdata=df_t)
table(pred.te, dat.te$y)
head(test)
pred.te
head(pred.te)
?predict
df_t
#first predictions
pred.te=predict(out,df_t)
tail(df_t)
results<-data.frame(PassengerId=892:1307, Survived=pred.te)
df_t<-test
df_t[df_t$Sex=="male","Sex"]<-0
df_t[df_t$Sex=="female","Sex"]<-1
df_t$Sex<-as.numeric(df_t$Sex)
df_t$Cabin<-NULL
df_t$Ticket<-NULL
df_t$Name<-NULL
df_t[df_t$Embarked=="C",]$Embarked <- 1
df_t[df_t$Embarked=="Q",]$Embarked <- 2
df_t[df_t$Embarked=="S",]$Embarked <- 3
df_t$Embarked<-as.numeric(df_t$Embarked)
#first predictions
pred.te=predict(out,test)
#first predictions
pred.te=predict(out,test[,-1])
df_t$Cabin<-NULL
df_t$Ticket<-NULL
df_t$Name<-NULL
df_t[df_t$Embarked=="C",]$Embarked <- 1
df_t[df_t$Embarked=="Q",]$Embarked <- 2
df_t[df_t$Embarked=="S",]$Embarked <- 3
df_t$Embarked<-as.numeric(df_t$Embarked)
summary(df_t)
df_t[is.na(df_t$Age)==TRUE,]
df_t[is.na(df_t$Age)==TRUE,]$Age
summary(df_t)
lapply(df_t[is.na(df_t$Age)==TRUE,]$Age,rnorm(1, mean(df_t$Age),sd(df_t$Age)))
c(1,2,3)
a<-c(1,2,3)
a<-rnorm(1,mean(a),sd(a))
a
a<-rnorm(3,mean(a),sd(a))
a
a<-c(1,2,3)
a<-rnorm(3,mean(a),sd(a))
a
summary(df_t)
df_t[is.na(df_t$Age)==TRUE,]$Age<-rnorm(86, mean(df_t$Age),sd(df_t$Age))
summary(df_t)
df_t[is.na(df_t$Age)==TRUE,]$Age<-rnorm(86, mean(df$Age),sd(df$Age))
summary(df_t)
round(22.3)
df_t<-test
df_t[df_t$Sex=="male","Sex"]<-0
df_t[df_t$Sex=="female","Sex"]<-1
df_t$Sex<-as.numeric(df_t$Sex)
df_t$Cabin<-NULL
df_t$Ticket<-NULL
df_t$Name<-NULL
#feature enginerring on Embarked
df[df$Embarked=="C",]$Embarked <- 1
df_t[df_t$Embarked=="C",]$Embarked <- 1
df_t[df_t$Embarked=="Q",]$Embarked <- 2
df_t[df_t$Embarked=="S",]$Embarked <- 3
df_t$Embarked<-as.numeric(df_t$Embarked)
summary(df_t)
df_t[is.na(df_t$Age)==TRUE,]$Age<-round(rnorm(86, mean(df$Age),sd(df$Age)))
df_t[is.na(df_t$Fare)==TRUE,]$Fare<-round(rnorm(1, mean(df$Age),sd(df$Age)))
summary(df_t)
#first predictions
pred.te=predict(out,df_t)
results<-data.frame(PassengerId=892:1309, Survived=pred.te)
head(results)
results[results$Survived==1,]
write.csv(results,file="svm_results1.csv", row.names=F)
